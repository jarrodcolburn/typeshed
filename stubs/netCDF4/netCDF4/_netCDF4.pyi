from typing import Any, overload, Literal, Sequence
from numpy import dtype
from __future__ import annotations

# from numpy import dtype

NC_DISKLESS: int
NC_PERSIST: int
# _StartCountStride: function
# _blosc_dict: dict
# _blosc_dict_inv: dict
# _cmode_dict: dict
# _find_dim: function
# _format_dict: dict
# _intnptonctype: dict
# _is_int: function
# _key: str
# _nctonptype: dict
# _needsworkaround_issue485: bool
# _nptonctype: dict
# _out_array_shape: function
# _private_atts: list
# _quantize: function
# _reverse_format_dict: dict
# _safecast: function
# _sortbylist: function
# _supportedtypes: dict_keys
# _szip_dict: dict
# _szip_dict_inv: dict
# _tostr: function
# _value: int
# _walk_grps: function
default_encoding: str
default_fillvals: dict
glob: function
is_native_big: bool
is_native_little: bool
unicode_error: str

class CompoundType:
    # _nc_type: Any
    dtype: Any
    dtype_view: Any
    name: str
    def __init__(self, group: Group, datatype, datatype_name: str) -> None: ...
    # def __reduce__(self) -> Any: ...

class Dataset:
    # _grpid: Any
    # _isopen: Any
    # _ncstring_attrs__: Any
    cmptypes: dict[str, CompoundType]
    data_model: Literal["a", "a+s", "r", "r+", "r+s", "rs", "w", "ws", "x",]
    dimensions: dict[str, Dimension]
    disk_format: Literal["DAP2", "DAP4", "HDF4", "HDF5", "NETCDF3", "PNETCDF", "UNDEFINED",]
    enumtypes: dict[str, EnumType]
    file_format: Literal["NETCDF3_64BIT_DATA", "NETCDF3_64BIT_OFFSET", "NETCDF3_CLASSIC", "NETCDF4_CLASSIC", "NETCDF4",]
    groups: dict[str, Group]
    keepweakref: bool
    name: str
    parent: Group
    path: str
    variables: dict[str, Variable]
    vltypes: dict[str, VLType]
    # __orthogonal_indexing__: Any
    def __init__(
        self,
        filename: str = ...,
        mode: Literal["a", "a+s", "r", "r+", "r+s", "rs", "w", "ws", "x",] = ...,
        clobber: bool = ...,
        diskless: bool = ...,
        persist: bool = ...,
        keepweakref: bool = ...,
        memory=...,
        encoding=...,
        parallel: bool = ...,
        comm=...,
        info=...,
        format: Literal["NETCDF3_64BIT_DATA", "NETCDF3_64BIT_OFFSET", "NETCDF3_CLASSIC", "NETCDF4_CLASSIC", "NETCDF4",] = ...,
    ) -> None: ...
    # def _close(self, *args, **kwargs) -> Any: ...
    # def _close_mem(self, *args, **kwargs) -> Any: ...
    # def _enddef(self, *args, **kwargs) -> Any: ...
    # def _getname(self, *args, **kwargs) -> Any: ...
    # def _redef(self, *args, **kwargs) -> Any: ...
    # def close(self) -> Any: ...
    def createCompoundType(self, datatype, datatype_name: str) -> CompoundType: ...
    def createDimension(self, dimname: str, size: int = ...) -> Dimension: ...
    def createEnumType(self, datatype, datatype_name: str, enum_dict: dict[str, int]) -> Any: ...
    def createGroup(self, groupname: str) -> Any: ...
    def createVLType(self, datatype, datatype_name: str) -> Any: ...
    def createVariable(
        self,
        varname: str,
        datatype: CompoundType
        | VLType
        | Literal["S1", "c", "i1", "b", "B", "u1", "i2", "h", "s", "u2", "i4", "i", "l", "u4", "i8", "u8", "f4", "f", "f8", "d"],
        dimensions=...,
        compression=...,
        zlib=...,
        complevel=...,
        shuffle=...,
        fletcher32=...,
        contiguous=...,
        chunksizes=...,
        szip_coding=...,
        szip_pixels_per_block=...,
        blosc_shuffle=...,
        endian=...,
        least_significant_digit=...,
        significant_digits=...,
        quantize_mode=...,
        fill_value=...,
        chunk_cache=...,
    ) -> Any: ...
    def delncattr(self, name, value) -> Any: ...
    def filepath(self, encoding=...) -> Any: ...
    def fromcdl(self, cdlfilename, ncfilename=..., mode=..., format=...) -> Any: ...
    @overload
    def get_variables_by_attributes(self, axis=...) -> Any: ...
    @overload
    def get_variables_by_attributes(self, standard_name=...) -> Any: ...
    @overload
    def get_variables_by_attributes(self, axis=...) -> Any: ...
    @overload
    def get_variables_by_attributes(self, axis=...) -> Any: ...
    @overload
    def get_variables_by_attributes(self, grid_mapping=...) -> Any: ...
    def getncattr(self, name) -> Any: ...
    def has_blosc_filter(self) -> bool: ...
    def has_bzip2_filter(self) -> bool: ...
    def has_szip_filter(self) -> bool: ...
    def has_zstd_filter(self) -> bool: ...
    def isopen(self) -> bool: ...
    def ncattrs(self) -> Any: ...
    def renameAttribute(self, oldname: str, newname: str) -> None: ...
    def renameDimension(self, oldname: str, newname: str) -> None: ...
    def renameGroup(self, oldname: str, newname: str) -> None: ...
    def renameVariable(self, oldname, newname) -> None: ...
    def set_always_mask(self, True_or_False) -> Any: ...
    def set_auto_chartostring(self, True_or_False:bool) -> None: ...
    def set_auto_mask(self, True_or_False:bool) -> None: ...
    def set_auto_maskandscale(self, True_or_False:bool) -> None: ...
    def set_auto_scale(self, True_or_False:bool) -> None: ...
    def set_fill_off(self) -> None: ...
    def set_fill_on(self) -> None: ...
    def set_ncstring_attrs(self, True_or_False: bool) -> None: ...
    def setncattr(self, name: str, value) -> Any: ...
    def setncattr_string(self, name:str, value) -> Any: ...
    def setncatts(self, attdict) -> Any: ...
    def sync(self) -> None: ...
    def tocdl(self, coordvars=..., data=..., outfile=...) -> Any: ...
    # def __delattr__(self, name) -> Any: ...
    # def __enter__(self) -> Any: ...
    # def __exit__(self, type, value, traceback) -> Any: ...
    # def __getattr__(self, name) -> Any: ...
    # def __getitem__(self, index) -> Any: ...
    # def __reduce__(self) -> Any: ...
    # def __setattr__(self, name, value) -> Any: ...

class Dimension:
    # _data_model: Any
    # _dimid: Any
    # _grp: Any
    # _grpid: Any
    # _name: Any
    name: str
    size: int | None
    # def __init__(self, group, name, size=...) -> Any: ...
    # def _getname(self, *args, **kwargs) -> Any: ...
    def group(self) -> Group: ...
    def isunlimited(self) -> bool: ...
    # def __len__(self) -> Any: ...
    # def __reduce__(self) -> Any: ...
    # def __setstate__(self, state) -> Any: ...

class EnumType:
    # _nc_type: Any
    dtype: Any
    enum_dict: dict[str,int]
    name: str
    # def __init__(self, group, datatype, datatype_name, enum_dict) -> Any: ...
    # def __reduce__(self) -> Any: ...

class Group(Dataset):
    def __init__(self, parent: Group, name: str) -> None: ...
    def close(self) -> IOError: ...

class MFDataset(Dataset):
    def __init__(self, files: str | Sequence[str], check: bool=..., aggdim:str | None=..., exclude:list[str]=..., master_file=...) -> None: ...
    def close(self) -> None: ...
    def ncattrs(self) -> Any: ...
    # def __reduce__(self) -> Any: ...
    # def __setattr__(self, name, value) -> Any: ...

class MFTime(_Variable):
    def __init__(self, time, units=..., calendar=...) -> None: ...
    # def __getitem__(self, index) -> Any: ...

class VLType:
    # _nc_type: Any
    dtype: Any
    name: str
    def __init__(self, group, datatype, datatype_name) -> None: ...
    # def __reduce__(self) -> Any: ...

class Variable:
    # _cmptype: Any
    # _enumtype: Any
    # _grp: Any
    # _grpid: Any
    # _has_lsd: Any
    # _iscompound: Any
    # _isenum: Any
    # _isprimitive: Any
    # _isvlen: Any
    # _name: Any
    # _ncstring_attrs__: Any
    # _nunlimdim: Any
    # _use_get_vars: Any
    # _varid: Any
    # _vltype: Any
    always_mask: bool
    chartostring: Any
    datatype: Any
    dimensions: dict[str, Dimension]
    dtype: VLType | CompoundType | EnumType | dtype
    mask: Any
    name: str 
    ndim: int
    scale: bool
    shape: tuple[int, ...]
    size: int
    # __orthogonal_indexing__: Any
    def __init__(
        self,
        group: Group,
        name: str,
        datatype: ...,
        dimensions: tuple[str, int | None] = ...,
        compression: Literal["zlib", "szip", "zstd", "bzip2", "blosc_lz", "blosc_lz4", "blosc_lz4hc", "blosc_zlib", "blosc_zstd"] =...,
        zlib: bool = ...,
        complevel: Literal[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] = ...,
        shuffle: bool = ...,
        szip_coding: Literal["ec", "nn"] = ...,
        szip_pixels_per_block: Literal[4, 6, 16, 32] = ...,
        blosc_shuffle: Literal[0, 1, 2] = ...,
        fletcher32: bool = ...,
        contiguous: bool = ...,
        chunksizes: int = ...,
        endian: Literal["big", "little", "native"] = ...,
        least_significant_digit: int = ...,
        fill_value=...,
        chunk_cache=...,
    ) -> None: ...
    # def _assign_vlen(self, *args, **kwargs) -> Any: ...
    # def _check_safecast(self, *args, **kwargs) -> Any: ...
    # def _get(self, *args, **kwargs) -> Any: ...
    # def _getdims(self, *args, **kwargs) -> Any: ...
    # def _getname(self, *args, **kwargs) -> Any: ...
    # def _pack(self, *args, **kwargs) -> Any: ...
    # def _put(self, *args, **kwargs) -> Any: ...
    # def _toma(self, *args, **kwargs) -> Any: ...
    def assignValue(self, val) -> Any: ...
    def chunking(self) -> Any: ...
    def delncattr(self, name, value) -> Any: ...
    def endian(self) -> Any: ...
    def filters(self) -> Any: ...
    def getValue(self) -> Any: ...
    def get_dims(self) -> Any: ...
    def get_var_chunk_cache(self) -> Any: ...
    def getncattr(self, name) -> Any: ...
    def group(self) -> Any: ...
    def ncattrs(self) -> Any: ...
    def quantization(self) -> Any: ...
    def renameAttribute(self, oldname, newname) -> Any: ...
    def set_always_mask(self, always_mask) -> Any: ...
    def set_auto_chartostring(self, chartostring) -> Any: ...
    def set_auto_mask(self, mask) -> Any: ...
    def set_auto_maskandscale(self, maskandscale) -> Any: ...
    def set_auto_scale(self, scale) -> Any: ...
    def set_collective(self, True_or_False) -> Any: ...
    def set_ncstring_attrs(self, *args, **kwargs) -> Any: ...
    def set_var_chunk_cache(self, size=..., nelems=..., preemption=...) -> Any: ...
    def setncattr(self, name, value) -> Any: ...
    def setncattr_string(self, name, value) -> Any: ...
    def setncatts(self, attdict) -> Any: ...
    def use_nc_get_vars(self, _use_get_vars) -> Any: ...
    def __array__(self, *args, **kwargs) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __getattr__(self, name) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

class _Dimension:
    def __init__(self, *args, **kwargs) -> None: ...
    def isunlimited(self, *args, **kwargs) -> bool: ...
    def __len__(self) -> int: ...

class _MemBuf:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    # def __reduce__(self) -> Any: ...
    # def __setstate__(self, state) -> Any: ...

class _Variable:
    def __init__(self, *args, **kwargs) -> None: ...
    # def _shape(self, *args, **kwargs) -> Any: ...
    def ncattrs(self, *args, **kwargs) -> Any: ...
    def set_always_mask(self, *args, **kwargs) -> Any: ...
    def set_auto_chartostring(self, *args, **kwargs) -> Any: ...
    def set_auto_mask(self, *args, **kwargs) -> Any: ...
    def set_auto_maskandscale(self, *args, **kwargs) -> Any: ...
    def set_auto_scale(self, *args, **kwargs) -> Any: ...
    def typecode(self, *args, **kwargs) -> Any: ...
    # def __getattr__(self, name) -> Any: ...
    # def __getitem__(self, index) -> Any: ...
    # def __len__(self) -> int: ...

# def __pyx_unpickle_Dimension(*args, **kwargs) -> Any: ...
# def _gethdf5libversion(*args, **kwargs) -> Any: ...
# def _set_alignment(*args, **kwargs) -> Any: ...
# def _set_default_format(*args, **kwargs) -> Any: ...
# def _set_viewdtype(*args, **kwargs) -> Any: ...
# def _to_ascii(*args, **kwargs) -> Any: ...
def chartostring(b, encoding=...) -> Any: ...
def date2index(dates, nctime, calendar=..., select=..., has_year_zero=...) -> Any: ...
def date2num(dates, units, calendar=..., has_year_zero=..., longdouble=...) -> Any: ...
def get_alignment() -> Any: ...
def get_chunk_cache() -> Any: ...
def getlibversion() -> Any: ...
def num2date(
    times, units, calendar=..., only_use_cftime_datetimes=..., only_use_python_datetimes=..., has_year_zero=...
) -> Any: ...
def set_alignment(threshold, alignment) -> Any: ...
def set_chunk_cache(self, size=..., nelems=..., preemption=...) -> Any: ...
def stringtoarr(a, NUMCHARS, dtype=...) -> Any: ...
def stringtochar(a, encoding=...) -> Any: ...
